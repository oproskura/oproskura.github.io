{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","quotes","index","primeColor","fetch","then","response","json","setState","onClick","this","length","Math","floor","random","colors","getRandomQuoteIndex","getRandomColor","quote","randomBackColor","backgroundColor","borderColor","className","style","id","color","icon","faQuoteLeft","author","target","role","href","faTwitter","bind","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAWqBA,E,4MAEnBC,MAAQ,CACNC,OAAQ,GACRC,MAAO,EACPC,WAAY,I,kEAGO,IAAD,OAClBC,MAXQ,0IAYLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJ,EAAKE,SAAS,CACZP,OAAQK,EAASL,QAChB,EAAKQ,c,4CAIS,IACbR,EAAWS,KAAKV,MAAhBC,OAEJA,EAAOU,OAAS,GAClBD,KAAKF,SAAS,CACZN,MAAOU,KAAKC,MAAMD,KAAKE,SAAWb,EAAOU,Y,uCAM7C,IAAMI,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAErIA,EAAOJ,OAAS,GAClBD,KAAKF,SAAS,CACZL,WAAYY,EAAOH,KAAKC,MAAMD,KAAKE,SAAWC,EAAOJ,a,gCAMzDD,KAAKM,sBACLN,KAAKO,mB,+BAGG,IAAD,EAC+BP,KAAKV,MAAnCC,EADD,EACCA,OAAQC,EADT,EACSA,MAAOC,EADhB,EACgBA,WACjBe,EAAQjB,EAAOC,GAEfiB,EAAkB,CAAEC,gBAAiBjB,EAAYkB,YAAalB,GAEpE,OACE,qBAAKmB,UAAU,uDAAuDC,MAAOJ,EAA7E,SACE,sBAAKG,UAAU,wBAAwBE,GAAG,YAA1C,UAEIN,GACE,6BAAYI,UAAU,kBACpBC,MAAO,CAAEE,MAAOtB,GADlB,UAEE,oBAAGmB,UAAU,+BAA+BE,GAAG,OAA/C,UAAsD,cAAC,IAAD,CAAiBE,KAAMC,MAA7E,IAA8FT,EAAMA,SACpG,yBAAQI,UAAU,6CAA6CE,GAAG,SAAlE,eAA8EN,EAAMU,aAI1F,sBAAKN,UAAU,yCAAf,UACE,mBAAGA,UAAU,MAAME,GAAG,cAAcK,OAAO,SAASC,KAAK,SACvDC,KAjBO,yEAkBPR,MAAOJ,EAFT,SAE0B,cAAC,IAAD,CAAiBO,KAAMM,QACjD,wBAAQV,UAAU,kBAChBE,GAAG,YACHD,MAAOJ,EACPV,QAASC,KAAKD,QAAQwB,KAAKvB,MAH7B,mC,GAjEqBwB,aCClBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4d046339.chunk.js","sourcesContent":["\nimport './App.css';\nimport React, { Component } from 'react'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\n\n\nconst API = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\n\nexport default class App extends Component {\n\n  state = {\n    quotes: [],\n    index: 0,\n    primeColor: ''\n  };\n\n  componentDidMount() {\n    fetch(API)\n      .then(response => response.json())\n      .then(response => {\n        this.setState({\n          quotes: response.quotes\n        }, this.onClick)\n      });\n  };\n\n  getRandomQuoteIndex() {\n    const { quotes } = this.state;\n\n    if (quotes.length > 0) {\n      this.setState({\n        index: Math.floor(Math.random() * quotes.length)\n      })\n    };\n  };\n\n  getRandomColor() {\n    const colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', '#472E32', '#BDBB99', '#77B1A9', '#73A857'];\n\n    if (colors.length > 0) {\n      this.setState({\n        primeColor: colors[Math.floor(Math.random() * colors.length)]\n      });\n    };\n  }\n\n  onClick() {\n    this.getRandomQuoteIndex();\n    this.getRandomColor();\n  }\n\n  render() {\n    const { quotes, index, primeColor } = this.state;\n    const quote = quotes[index];\n    const tweetURl = 'https://twitter.com/intent/tweet?text=${quote.quote} - ${quote.author}';\n    const randomBackColor = { backgroundColor: primeColor, borderColor: primeColor }\n\n    return (\n      <div className='row vh-100 align-items-center justify-content-center' style={randomBackColor}>\n        <div className='p-5 rounded quote-box' id=\"quote-box\">\n          {\n            quote && (\n              <blockquote className='blockquote mb-4'\n                style={{ color: primeColor }}>\n                <p className=\"text-center font-weight-bold\" id=\"text\"><FontAwesomeIcon icon={faQuoteLeft} /> {quote.quote}</p>\n                <footer className=\"card-blockquote d-flex justify-content-end\" id=\"author\">- {quote.author}</footer>\n              </blockquote>)\n          }\n\n          <div className='d-flex justify-content-between buttons'>\n            <a className='btn' id=\"tweet-quote\" target='_blank' role='button'\n              href={tweetURl}\n              style={randomBackColor}><FontAwesomeIcon icon={faTwitter} /></a>\n            <button className='btn btn-primary'\n              id=\"new-quote\"\n              style={randomBackColor}\n              onClick={this.onClick.bind(this)}\n            >New quote</button>\n          </div>\n\n        </div>\n\n      </div>\n    )\n  };\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}